;defining procedures in Scheme

(define (square x) (* x x))

;if we think in functional terms we can build out procedures using this

(define (sumOfSquares x y) (+ (square x) (square y)))

;how do we use a conditional in Lisp, let's check it out

(define (abs x)
  (cond ((> x 0) x)
        ((= x 0) 0)
        ((< x 0) (- x))))

;Here we are stating if x is greater than 0 then return x
;else if x equal to 0 then return 0
;else if x < 0 return -x
;thusly we have defined absolute value of x!
;We use the term predicate to talk about procedures that return true or false

;There is an else command in Lisp, we can simplify abs x

(define (abs x)
  (cond ((< x 0) (-x))
        (else x)))

;We also have an if in our conditionals

;Recursion principles
;Let's take a basic linear recursion model that we've used

(define (factorial n)
  (if (= n 1)
    1
    (* n (factorial (- n 1)))))

;Let's take a look at an iterative version of factorial using Scheme

(define (fact-iter product counter max-count)
  (if (> counter max-count)
    product
    (fact-iter (* counter product)
               (+ counter 1)
               max-count)))

(define (factorial n)
  (fact-iter 1 1 n))



